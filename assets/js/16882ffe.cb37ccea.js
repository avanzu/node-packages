"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[189],{3303:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"kernel/kernel/owning-your-types","title":"Owning Your Application Types","description":"The @avanzu/kernel exists to provide application structure without creeping into your domain logic. It lives at the edges of your system \u2014 managing controllers, lifecycle, middleware, and DI \u2014 but your core logic remains untouched by framework internals.","source":"@site/docs/kernel/2000-kernel/1001-owning-your-types.md","sourceDirName":"kernel/2000-kernel","slug":"/kernel/kernel/owning-your-types","permalink":"/node-packages/docs/kernel/kernel/owning-your-types","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1001,"frontMatter":{"title":"Owning Your Application Types","sidebar_label":"Owning Your Application Types"},"sidebar":"kernelSidebar","previous":{"title":"Core concepts","permalink":"/node-packages/docs/kernel/kernel/core-concepts"},"next":{"title":"The Kernel","permalink":"/node-packages/docs/kernel/kernel/the-kernel"}}');var o=t(4848),i=t(8453);const s={title:"Owning Your Application Types",sidebar_label:"Owning Your Application Types"},l=void 0,a={},c=[{value:"Why?",id:"why",level:2},{value:"Example: Declaring Your Application Types",id:"example-declaring-your-application-types",level:2},{value:"Declaring Request Body Types",id:"declaring-request-body-types",level:2},{value:"Controller Injections",id:"controller-injections",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const n={blockquote:"blockquote",code:"code",em:"em",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@avanzu/kernel"})," exists to provide application structure without creeping into your domain logic. It lives at the ",(0,o.jsx)(n.em,{children:"edges"})," of your system \u2014 managing controllers, lifecycle, middleware, and DI \u2014 but your core logic remains untouched by framework internals."]}),"\n",(0,o.jsxs)(n.p,{children:["To support this, the kernel provides a set of generic and composable types that can be ",(0,o.jsx)(n.strong,{children:"redeclared in your application"}),", giving you ",(0,o.jsx)(n.strong,{children:"full control over types"})," like ",(0,o.jsx)(n.code,{children:"Context"}),", ",(0,o.jsx)(n.code,{children:"App"}),", ",(0,o.jsx)(n.code,{children:"Middleware"}),", and ",(0,o.jsx)(n.code,{children:"Container"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"why",children:"Why?"}),"\n",(0,o.jsx)(n.p,{children:"Most TypeScript-based frameworks tend to leak into your business logic through decorators, global types, or complex runtime behaviors. The kernel aims to avoid that by keeping everything pluggable and opt-in."}),"\n",(0,o.jsx)(n.p,{children:"This separation allows:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Full ",(0,o.jsx)(n.strong,{children:"type safety"})," in your application code"]}),"\n",(0,o.jsxs)(n.li,{children:["A ",(0,o.jsx)(n.strong,{children:"clean dependency graph"})," (no deep kernel imports)"]}),"\n",(0,o.jsxs)(n.li,{children:["Better ",(0,o.jsx)(n.strong,{children:"IDE and DX support"})," through tailored types"]}),"\n",(0,o.jsxs)(n.li,{children:["Easier ",(0,o.jsx)(n.strong,{children:"testing and mocking"}),", as everything is explicit"]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"example-declaring-your-application-types",children:"Example: Declaring Your Application Types"}),"\n",(0,o.jsx)(n.p,{children:"To make the kernel types specific to your app, you simply redeclare them with your own container or state types:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// ./src/application/kernel.ts\n\nimport * as Kernel from '@avanzu/kernel'\n\n// Your application's container services\nexport interface Services {\n  appLogger: Kernel.Logger\n  // add more services...\n}\n\n// Optional: enhance the auth user model\nexport interface Principal extends Kernel.AuthUser {\n  id: string\n  roles: string[]\n}\n\n// Your dependency injection container\nexport interface Container extends Kernel.Container<Services> {}\n\n// Your application state (per request)\nexport interface State extends Kernel.AppState<Container> {}\n\n// Enhanced Koa context\nexport interface Context<Body = any> extends Kernel.AppContext<\n  Container,\n  State,\n  Principal,\n  Body\n> {}\n\n// Final app types\nexport interface App extends Kernel.App<Container, State, Context> {}\nexport interface Middleware extends Kernel.AppMiddleware<Container, State, Context> {}\nexport interface Logger extends Kernel.Logger {}\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["These type declarations act as the boundary of your application. Everything inside can now refer to ",(0,o.jsx)(n.code,{children:"Context"}),", ",(0,o.jsx)(n.code,{children:"Middleware"}),", or ",(0,o.jsx)(n.code,{children:"Container"})," without importing anything from the kernel."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"declaring-request-body-types",children:"Declaring Request Body Types"}),"\n",(0,o.jsx)(n.p,{children:"You can enhance the Context type further to support strongly typed request bodies for POST/PUT operations:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"async createUser(context: Context<{ username: string; password: string }>) {\n  const { username, password } = context.request.body\n  // ...\n}\n\n"})}),"\n",(0,o.jsx)(n.p,{children:"This gives you proper autocompletion and validation at compile time \u2014 without any runtime validation boilerplate (though you should still validate input before trusting it!)."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"controller-injections",children:"Controller Injections"}),"\n",(0,o.jsx)(n.p,{children:"These types will automatically apply inside controller classes, middleware, or any logic that consumes the context or DI container."}),"\n",(0,o.jsx)(n.p,{children:"For example, when injecting via the constructor:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"@Kernel.Controller()\nexport class AppController {\n  constructor(private readonly logger: Logger) {}\n\n  @Kernel.Get('/')\n  async greet(context: Context) {\n    this.logger.info('Greeting endpoint hit')\n    context.body = 'Hello'\n  }\n}\n\n"})}),"\n",(0,o.jsx)(n.p,{children:"Or via contextual access (if you need something like the authenticated user):"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"@Kernel.Get('/me')\nasync currentUser(context: Context) {\n  const user = context.scope.cradle.user\n  context.body = { id: user.id }\n}\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsx)(n.p,{children:"You don\u2019t have to use these extended types, but they\u2019re highly recommended for any application of non-trivial size. They let you:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Keep ",(0,o.jsx)(n.code,{children:"@avanzu/kernel"})," out of your core code"]}),"\n",(0,o.jsx)(n.li,{children:"Get strong types tailored to your app"}),"\n",(0,o.jsx)(n.li,{children:"Avoid leaky abstractions"}),"\n",(0,o.jsx)(n.li,{children:"Build a future-proof codebase"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The kernel stays at the boundary. You stay in control."})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var r=t(6540);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);