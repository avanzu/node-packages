"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[949],{4591:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"kernel/kernel/controllers","title":"Controllers","description":"The @avanzu/kernel package uses a decorator-based approach to define route handlers in a modular, controller-centric way.","source":"@site/docs/kernel/2000-kernel/1020-controllers.md","sourceDirName":"kernel/2000-kernel","slug":"/kernel/kernel/controllers","permalink":"/node-packages/docs/kernel/kernel/controllers","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1020,"frontMatter":{"title":"Controllers","sidebar_label":"Controllers"},"sidebar":"kernelSidebar","previous":{"title":"The Container and ContainerBuilder","permalink":"/node-packages/docs/kernel/kernel/container-and-builder"},"next":{"title":"OpenAPI Integration","permalink":"/node-packages/docs/kernel/kernel/openapi"}}');var l=r(4848),o=r(8453);const s={title:"Controllers",sidebar_label:"Controllers"},c=void 0,i={},a=[{value:"Controller Declaration",id:"controller-declaration",level:2},{value:"Supported HTTP Verbs",id:"supported-http-verbs",level:2},{value:"Middleware Per Route or Controller",id:"middleware-per-route-or-controller",level:2},{value:"Controller Discovery",id:"controller-discovery",level:2},{value:"Best Practice: Use a Barrel File",id:"best-practice-use-a-barrel-file",level:3},{value:"Dependency Injection (DI)",id:"dependency-injection-di",level:2},{value:"Dependency Injection via Context",id:"dependency-injection-via-context",level:2}];function d(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.p,{children:"The @avanzu/kernel package uses a decorator-based approach to define route handlers in a modular, controller-centric way."}),"\n",(0,l.jsx)(n.p,{children:"This provides:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Strong cohesion between route definitions and their logic"}),"\n",(0,l.jsx)(n.li,{children:"Easy route-level middleware integration"}),"\n",(0,l.jsx)(n.li,{children:"Better readability and separation of concerns"}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"controller-declaration",children:"Controller Declaration"}),"\n",(0,l.jsx)(n.p,{children:"A controller is a class decorated with @Controller(), where each method maps to a route."}),"\n",(0,l.jsx)(n.p,{children:"Example:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"import * as Kernel from '@avanzu/kernel'\n\n@Kernel.Controller('/greet')\nexport class GreetController {\n\n    @Kernel.Get('/')\n    sayHello(context: Kernel.Context) {\n        context.body = 'Hello, world!'\n    }\n\n    @Kernel.Post('/')\n    greetUser(context: Kernel.Context) {\n        const { name } = context.request.body\n        context.body = `Hello, ${name}`\n    }\n}\n\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["\ud83d\udca1 ",(0,l.jsx)(n.code,{children:"@Controller(path)"})," will prefix all routes in the class with that path."]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"supported-http-verbs",children:"Supported HTTP Verbs"}),"\n",(0,l.jsx)(n.p,{children:"You can decorate methods with any of the following:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"@Get(path)"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"@Post(path)"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"@Put(path)"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"@Delete(path)"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"@Patch(path)"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Each of these maps directly to the corresponding HTTP method."}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"middleware-per-route-or-controller",children:"Middleware Per Route or Controller"}),"\n",(0,l.jsx)(n.p,{children:"Each controller or endpoint can have its own middleware stack."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"@Kernel.Controller('/secure', authMiddleware())\nexport class SecureController {\n    @Kernel.Get('/')\n    dashboard(context: Kernel.Context) {\n        context.body = 'Restricted content'\n    }\n}\n\n"})}),"\n",(0,l.jsx)(n.p,{children:"You can even add route-level middleware:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"@Kernel.Get('/admin', adminOnlyMiddleware(), logRequests())\n\n"})}),"\n",(0,l.jsx)(n.p,{children:"This will execute the middlewares in order before the controller logic."}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"controller-discovery",children:"Controller Discovery"}),"\n",(0,l.jsxs)(n.p,{children:["Controllers in the kernel do not need to be registered indivually in the DI container. Instead, they are automatically discovered through the use of the ",(0,l.jsx)(n.code,{children:"Controller"})," decorator."]}),"\n",(0,l.jsx)(n.p,{children:"However, for this to work, the controller code must be loaded into memory during the application startup."}),"\n",(0,l.jsx)(n.h3,{id:"best-practice-use-a-barrel-file",children:"Best Practice: Use a Barrel File"}),"\n",(0,l.jsxs)(n.p,{children:["To ensure all controllers are properly registered, you should re-export them in a barrel file (commonly ",(0,l.jsx)(n.code,{children:"controllers/index.ts"}),") and import that file in your application\u2019s main container setup:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"\ud83d\udcc1 application/\n \u2523 \ud83d\udcc1 controllers/\n \u2503 \u2523 \ud83d\udcc4 app.controller.ts\n \u2503 \u2523 \ud83d\udcc4 health.controller.ts\n \u2503 \u2517 \ud83d\udcc4 index.ts         <-- Export all controllers here\n \u2523 \ud83d\udcc4 kernel.ts\n \u2517 \ud83d\udcc1 dependencyInjection/\n   \u2517 \ud83d\udcc4 containerBuilder.ts\n\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Example of ",(0,l.jsx)(n.code,{children:"controllers/index.ts"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"export * from './app.controller'\nexport * from './health.controller'\n\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Then, import it in your ",(0,l.jsx)(n.code,{children:"containerBuilder.ts"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"import '~/application/controllers'\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"\u2705 This ensures that all controller classes are registered at runtime without requiring manual updates to the container setup each time a new controller is added."}),"\n",(0,l.jsx)(n.p,{children:"However, you still need to update the barrel file to register new controllers."}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"dependency-injection-di",children:"Dependency Injection (DI)"}),"\n",(0,l.jsx)(n.p,{children:"Controller classes support constructor-based injection for services or dependencies that are resolved at request time."}),"\n",(0,l.jsx)(n.p,{children:"This is the preferred method, because:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Controllers are instantiated per request"}),"\n",(0,l.jsx)(n.li,{children:"Dependencies injected in the constructor are consistent with the DI container at the time of construction"}),"\n",(0,l.jsx)(n.li,{children:"It avoids manual container access, keeping code cleaner"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"export class StatusController {\n    constructor(private readonly healthService: HealthService) {}\n\n    @Kernel.Get('/status')\n    check(context: Kernel.Context) {\n        const result = this.healthService.check()\n        context.body = result\n    }\n}\n\n"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"dependency-injection-via-context",children:"Dependency Injection via Context"}),"\n",(0,l.jsxs)(n.p,{children:["Sometimes, certain dependencies ",(0,l.jsx)(n.strong,{children:"may"})," become available after the controller has been constructed \u2014 for example, user-specific data that gets resolved in middleware and injected into the scope."]}),"\n",(0,l.jsxs)(n.p,{children:["In such cases, you can access the ",(0,l.jsx)(n.code,{children:"context.scope.cradle"})," manually."]}),"\n",(0,l.jsxs)(n.p,{children:["Each controller method receives the enhanced ",(0,l.jsx)(n.code,{children:"Context"})," object, which includes the scoped DI container:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"@Kernel.Get('/me')\ngetUser(context: Kernel.Context) {\n    const user = context.scope.cradle.user\n    context.body = { id: user.id, name: user.name }\n}\n\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["\u2139\ufe0f Prefer constructor injection for static dependencies like services or use cases, and use ",(0,l.jsx)(n.code,{children:"context.scope.cradle"})," only when dynamic or request-specific values are involved."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>c});var t=r(6540);const l={},o=t.createContext(l);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);