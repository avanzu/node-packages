"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[526],{8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var o=t(6540);const r={},a=o.createContext(r);function i(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(a.Provider,{value:n},e.children)}},9656:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>s});const o=JSON.parse('{"id":"kernel/kernel/middleware","title":"Middleware","description":"Middleware functions in web applications handle requests and responses, performing tasks like logging, authentication, and validation. They enhance modularity and reusability, allowing developers to easily add or modify functionality.","source":"@site/docs/kernel/2000-kernel/1030-middleware.md","sourceDirName":"kernel/2000-kernel","slug":"/kernel/kernel/middleware","permalink":"/node-packages/docs/kernel/kernel/middleware","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1030,"frontMatter":{"title":"Middleware","sidebar_label":"Middleware"},"sidebar":"kernelSidebar","previous":{"title":"Controllers","permalink":"/node-packages/docs/kernel/kernel/controllers"},"next":{"title":"Message Bus Integration","permalink":"/node-packages/docs/kernel/kernel/message-bus"}}');var r=t(4848),a=t(8453);const i={title:"Middleware",sidebar_label:"Middleware"},l=void 0,d={},s=[{value:"Creating middlewares",id:"creating-middlewares",level:3},{value:"Adding middlewares",id:"adding-middlewares",level:3},{value:"Application wide",id:"application-wide",level:4},{value:"Controller wide",id:"controller-wide",level:4},{value:"Endpoint isolated",id:"endpoint-isolated",level:4}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Middleware functions in web applications handle requests and responses, performing tasks like logging, authentication, and validation. They enhance modularity and reusability, allowing developers to easily add or modify functionality."}),"\n",(0,r.jsx)(n.h3,{id:"creating-middlewares",children:"Creating middlewares"}),"\n",(0,r.jsxs)(n.p,{children:["In order to create a custom middlware, you can mainly follow the ",(0,r.jsx)(n.a,{href:"https://koajs.com/",children:"koa"})," documentation.\nHowever, instead of using the types provided by koa, you will mostly use the shorthand declarations from ",(0,r.jsx)(n.a,{href:"/node-packages/docs/kernel/kernel/owning-your-types",children:"owning your tpyes"}),". Additionally, you will have access to your DIC in the ",(0,r.jsx)(n.code,{children:"scope"})," property in the context object."]}),"\n",(0,r.jsxs)(n.p,{children:["Assuming that you have your interfaces moved into ",(0,r.jsx)(n.code,{children:"./src/application/interfaces"}),", lets build a middleware that logs incoming requests."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// ./src/application/middlware/logRequests.ts\n\nimport { Next } from 'koa'\nimport { Context, Middleware } from '~/application/interfaces'\n\nexport function logRequests() : Middleware {\n    return async function writeRequestLog(context: Context, next: Next) {\n        const logger = context.scope.cradle.appLogger\n        await next()\n        logger.info(`${context.method} ${context.path} - ${context.status}`)\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["[!NOTE]\nit is totally fine to use arrow functions instead of named ones if you prefer the syntax.",(0,r.jsx)("br",{}),"However, named functions provide the additional benefit to have their names show up in the stack trace which makes debugging much easier."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"adding-middlewares",children:"Adding middlewares"}),"\n",(0,r.jsx)(n.p,{children:"Since the server component is a koa application, you can use any pre made middleware from the koa ecosystem."}),"\n",(0,r.jsx)(n.h4,{id:"application-wide",children:"Application wide"}),"\n",(0,r.jsxs)(n.p,{children:["In order to add application wide middlewares, you can overwrite the ",(0,r.jsx)(n.code,{children:"middlewares()"})," method in your kernel."]}),"\n",(0,r.jsxs)(n.p,{children:["As an example, let's integrate ",(0,r.jsx)(n.code,{children:"@koa/bodyparser"})," and ",(0,r.jsx)(n.code,{children:"koa-helmet"})]}),"\n",(0,r.jsx)(n.p,{children:"Install dependencies"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm i @koa/bodyparser koa-helmet\n"})}),"\n",(0,r.jsx)(n.p,{children:"Extend your kernel class"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// ./src/application/kernel.ts\n\nimport { bodyParser } from '@koa/bodyparser'\nimport koaHelmet from 'koa-helmet'\n// ...\n\nexport class MyProjectKernel extends Kernel.Kernel<Config, App, Container> {\n    // ....\n    protected middlewares() : Kernel.Middleware[] {\n\n        return [\n            koaHelmet(),\n            bodyParser()\n        ]\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"controller-wide",children:"Controller wide"}),"\n",(0,r.jsxs)(n.p,{children:["In order to add middleware to every endpoint of a controller, you can add them in the ",(0,r.jsx)(n.code,{children:"Controller"})," decorator."]}),"\n",(0,r.jsxs)(n.p,{children:["Let's add our ",(0,r.jsx)(n.code,{children:"logRequests"})," middleware to our ",(0,r.jsx)(n.code,{children:"AppController"})," for example."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import * as Kernel from '@avanzu/kernel'\nimport { logRequests } from '~/application/middleware'\n// ...\n@Kernel.Controller('', logRequests()) // add additional middlewares as needed\nexport class AppController {\n    // ...\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"endpoint-isolated",children:"Endpoint isolated"}),"\n",(0,r.jsx)(n.p,{children:"Attaching a middleware to a single endpoint is pretty much the same deal as attaching it to a controller.\nSimply add them to the decorator for that endpoint."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import * as Kernel from '@avanzu/kernel'\nimport { logRequests } from '~/application/middleware'\n// ...\n@Kernel.Controller() // add additional middlewares as needed\nexport class AppController {\n    // ...\n    @Kernel.Get('/health', logRequests())\n    async healthCheck(context: Context) {\n        context.body = 'OK'\n    }\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);