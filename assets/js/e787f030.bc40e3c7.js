"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[23],{8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var i=t(6540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},8836:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"kernel/guides/scaffolding/layered","title":"Layered style","description":"If you prefer to organize your codebase in a more traditional, layered style, the recommended structure would look something like this","source":"@site/docs/kernel/3000-guides/1000-scaffolding/2000-layered.md","sourceDirName":"kernel/3000-guides/1000-scaffolding","slug":"/kernel/guides/scaffolding/layered","permalink":"/node-packages/docs/kernel/guides/scaffolding/layered","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2000,"frontMatter":{"title":"Layered style","sidebar_label":"Layered style"},"sidebar":"kernelSidebar","previous":{"title":"Minimal","permalink":"/node-packages/docs/kernel/guides/scaffolding/minimal"},"next":{"title":"FeatureSlice style","permalink":"/node-packages/docs/kernel/guides/scaffolding/sliced"}}');var s=t(4848),r=t(8453);const o={title:"Layered style",sidebar_label:"Layered style"},l=void 0,a={},c=[{value:"Folder structure breakdown",id:"folder-structure-breakdown",level:3}];function d(e){const n={code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"If you prefer to organize your codebase in a more traditional, layered style, the recommended structure would look something like this"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"myproject/\n    package.json\n    tsconfig.json\n    src/\n        main.ts\n        domain/\n            entities/\n            features/\n            services/\n        infrastructure/\n            index.ts\n        configuration/\n            default.ts\n            test.ts\n            production.ts\n            development.ts\n        application/\n            kernel.ts\n            controllers/\n                appController.ts\n                index.ts\n            dependencyInjection/\n                containerBuilder.ts\n                index.ts\n            middleware/\n            modules/\n                configuration/\n                    config.ts\n            services/\n"})}),"\n",(0,s.jsx)(n.h3,{id:"folder-structure-breakdown",children:"Folder structure breakdown"}),"\n",(0,s.jsxs)(n.p,{children:["Locating your codebase in a ",(0,s.jsx)(n.code,{children:"src/"})," folder allows to separate typescript files and typescript bild artifacts."]}),"\n",(0,s.jsx)(n.p,{children:"Inside of the sources folder, we organize horizontally in terms of abstraction layer. The folder structure inside of each layer is a suggestion but ultimately up to you."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"domain/"})," - contains code that revolves around the buisness- or problem domain.",(0,s.jsx)("br",{}),"Code in here has a very high abstraction level and should have no reason to import anything outside of the ",(0,s.jsx)(n.code,{children:"domain"})," folder.",(0,s.jsx)("br",{}),"Use interfaces to describe dependencies that your domain needs to function without them being part of the domain layer.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"entities/"})," - Your domain models"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"features/"})," - business centric use cases"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"services/"})," - reusable behavior that can be shared amongst multiple use cases"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"infrastructure/"})," - contains concrete, technology centric implementations of the interfaces declared in the domain layer."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"configuration/"})," - contains your application configuration. This setup assumes that you will run your application in different ",(0,s.jsx)(n.code,{children:"NODE_ENV"})," environments which will have different configuration values."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"application/"})," - contains application specific code like controllers, middlewares and the container builder.",(0,s.jsx)("br",{}),"Here you will wire the abstractions of the domain layer with the concrete implementations of the infrastructure layer.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"kernel.ts"})," - your application kernel that manages the application lifecycle."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"main.ts"})," - the entrypoint of your application that loads the configuration, initializes and runs the kernel."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);